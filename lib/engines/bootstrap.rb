require "sass"

module Engines
  class Bootstrap
    DEFAULT_COLORS = ["#D4D8D1", "#A8A8A1", "#AA9A66", "#B74934", "#577492", "#67655D", "#332C2F"]
    MAX_COLORS = DEFAULT_COLORS.length

    attr_reader :colors

    def self.extract_colors(image_url)
      colors = []

      if image_url.blank?
        colors = DEFAULT_COLORS.dup
      else
        begin
          extractor = Prizm::Extractor.new(image_url)
          colors = extractor.get_colors(7, false).sort { |a, b| b.to_hsla[2] <=> a.to_hsla[2] }.map { |p| extractor.to_hex(p) }
          extractor = nil

          # Fill in default colors if parsed colors are less than 7
          if (length = colors.length) < MAX_COLORS
            colors[length...MAX_COLORS] = DEFAULT_COLORS.dup[length...MAX_COLORS]
          end
        rescue
          colors = DEFAULT_COLORS.dup
        end
      end

      colors
    end

    def initialize(colors = [])
      @colors = colors
    end

    def variables
      @variables ||= set_variables
    end

    def compile
      Sass::Engine.new("/* CSS generated by http://lavishbootstrap.com */\n" +
        variables + Lavish::Application::BOOTSTRAP, syntax: :scss).render
    end

    private

    def set_variables
      @variables = Lavish::Application::VARIABLES
      @variables.gsub!(/(\$body-bg:\s+)[^;]+/i, '\1' + colors[0].downcase)
      @variables.gsub!(/(\$gray-lighter:\s+)[^;]+/i, '\1' + colors[1].downcase)
      @variables.gsub!(/(\$gray-light:\s+)[^;]+/i, '\1' + colors[2].downcase)
      @variables.gsub!(/(\$gray:\s+)[^;]+/i, '\1' + colors[3].downcase)
      @variables.gsub!(/(\$gray-dark:\s+)[^;]+/i, '\1' + colors[5].downcase)
      #variables.gsub!(/(@gray-darker:\s+)[^;]+/i, '\1' + @colors[6].downcase)

      @variables.gsub!(/(\$brand-primary:\s+)[^;]+/i, '\1' + colors[4].downcase)
      @variables.gsub!(/(\$navbar-inverse-bg:\s+)[^;]+/i, '\1' + colors[6].downcase)
      @variables.gsub!(/(\$table-border-color:\s+)[^;]+/i, '\1' + colors[5].downcase)
    end
  end
end